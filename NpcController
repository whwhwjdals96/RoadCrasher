using System;
using UnityEngine;

/// <summary>
/// 앞 물체와의 간격, Target X값과의 거리, 차체의 각도를 계산하여 차의 Steer값과 target speed값을 결정한다.
/// </summary>
namespace NeoCosmo.Cho
{
    public class NpcController : MonoBehaviour, INpcInput
    {
        RaycastHit fronthit;
        float lastFrameDIstance; //바로 이전 앞 물체와의 거리
        float[] targetPositionX; //차선의 x값
        float frontcarSpeed;
        int nowLineIndex;        //현재 차선
        float baseSpeed;         //기본 속도
        float aggrSpeed;         //공격적 속도
        int npcType;             //Npc 타입

        float target;
        float steer;

        float targetZ;                       // 플레이어 기준 target z값
        readonly float lineWeith = 0.5f;     // 차선 사이의 거리 / 2
        readonly float notice = 10f;          // 플레이어 인지 거리

        bool changeLine = false;
        bool goRight = true;
        // Start is called before the first frame update
        void Start()
        {
            this.targetPositionX = SystemManager.instance.GetLines();
            InitLineIndex(); // 라인index 초기화 
            target = targetPositionX[nowLineIndex];

            steer = 0;
            lastFrameDIstance = 0;
            frontcarSpeed = 40;

            TargetSteer = 0;

            npcType = GetInitType();
            baseSpeed = GetInitSpeed(20,40);
            aggrSpeed = GetInitSpeed(70, 90);
            targetZ= UnityEngine.Random.Range(-3,3);

            TargetSpeed = baseSpeed;
        }

        public void GetInput(bool canDrive)
        {
            if (canDrive)
            {
                //NormalDriving();
                AggrDriving();

                if (steer > 0)
                {
                    #region Target 경계에 도달하지 못했다.
                    if (this.transform.position.x < target - lineWeith)// 차선 왼쪽경계(target.x - targetWeith) 도달X
                    {
                        TargetSteer = steer; //오른쪽으로 바퀴 회전
                        goRight = true;
                    }
                    else if (this.transform.position.x > target + lineWeith)// 차선 오른쪽경계(target.x - targetWeith) 도달X
                    {
                        TargetSteer = -steer;//왼쪽으로 바퀴 회전
                        goRight = false;
                    }
                    #endregion

                    #region 경계를 지났다.
                    if (goRight == true) //오른쪽으로 진행 도중
                    {
                        if (this.transform.position.x > target - lineWeith) // 차선경계 넘었다
                        {
                            if (this.transform.rotation.y > -0.001 && this.transform.rotation.y < 0.001) // 차 동체의 각도가 거의0이면
                            {
                                TargetSteer = 0; //직진
                                changeLine = false;
                            }
                            else //차 동체가 앞을 볼때까지 왼쪽 회전(오른쪽으로 회전했으므로) 
                            {
                                TargetSteer = -1;
                            }
                        }
                    }
                    else if (goRight == false)
                    {
                        if (this.transform.position.x < target + lineWeith) // 차선경계 넘었다
                        {
                            if (this.transform.rotation.y > -0.001 && this.transform.rotation.y < 0.001)
                            {
                                TargetSteer = 0;
                                changeLine = false;
                            }
                            else//차 동체가 앞을 볼때까지 오른쪽 회전(왼쪽으로 회전했으므로) 
                            {
                                TargetSteer = 1;
                            }
                        }
                    }
                    #endregion
                }
            }
            else
            {
                TargetSpeed = 0;
            }
        }

        /// <summary>
        /// 일반적인 상황에서 운전, 앞 물체와의 거리를 확인하고 행동
        /// </summary>
        void NormalDriving()
        {
            if (TargetSteer == 0)
            {
                TargetSpeed = baseSpeed;
            }
   
            steer = 0.25f;
            if (Physics.Raycast(this.transform.position, transform.forward, out fronthit, 10f, 7))
            {
                if (fronthit.rigidbody != null)
                {
                    frontcarSpeed = fronthit.rigidbody.velocity.magnitude;
                }

                float nowDistanceBWfront = Vector3.Distance(this.transform.position, fronthit.transform.position); //현재 앞 차와의 거리

                if (lastFrameDIstance > nowDistanceBWfront) //앞 차(물체)와 점점 가까워지면
                {
                    TargetSpeed = baseSpeed - 5;
                    if (npcType == 1) // NpcChar = 1 : 차선을 바꾼다.
                    {
                        if (changeLine == false)// 여러번 불리는 것을 방지
                        {
                            changeLine = true;
                            ChooseRandomLine();
                        }
                    }
                    else                        // NpcChar < 1 : 앞 차(물체)와의 거리를 유지한다 
                    {
                        if (frontcarSpeed <= 5) // 속도가 5보다 작을 경우(거의 정지)
                        {
                            if (changeLine == false)// 여러번 불리는 것을 방지
                            {
                                changeLine = true; //차선 변경
                                ChooseRandomLine();
                            }
                        }                       // 속도가 5보다 클 경우
                        else
                        {
                            TargetSpeed = frontcarSpeed; // 앞 차와 속도를 똑같이하여 거리 유지
                        }
                    }
                }

                lastFrameDIstance = nowDistanceBWfront;
            }
        }

        /// <summary>
        /// 플레이어를 공격하는 운전
        /// </summary>
        void AggrDriving()
        {
            steer = 0.5f;
            if (SystemManager.instance.GetPlayerTransform().position.z - this.gameObject.transform.position.z > -targetZ) //플레이어보다 뒤에있음
            {
                TargetSpeed = aggrSpeed; //빠르게 접근
            }
            else
            {
                TargetSpeed = 20f; //in front of my car
                if (Vector3.Distance(SystemManager.instance.GetPlayerTransform().position, this.transform.position) < notice) //플레이어가 인지 범위안에 있으면
                {

                    target = SystemManager.instance.GetPlayerTransform().position.x; //target set
                    TargetSpeed = SystemManager.instance.GetPlayerSpeed()+targetZ; //플레이어와 속도를 같게하여 
                }
            }

            if (Vector3.Distance(SystemManager.instance.GetPlayerTransform().position, this.transform.position) < notice)
            {
                target = SystemManager.instance.GetPlayerTransform().position.x;
                TargetSpeed = SystemManager.instance.GetPlayerSpeed();
            }
            else
            {
                target = targetPositionX[nowLineIndex];
            }
            
        }

        public float TargetSpeed { get; private set; }
        public float TargetSteer { get; private set; }

        void ChooseRandomLine() // 현재 차선에서 오른쪽 왼쪽 랜덤하게 선택 but 양 사이드일 경우 한쪽으로만
        {
            int chooseRnadomLine = UnityEngine.Random.Range(0, 2); // 0 = 오른쪽, 1 = 왼쪽
            if (nowLineIndex == 0) // 가장 왼쪽 차선일 때
            {
                chooseRnadomLine = 0;
            }
            else if (nowLineIndex == 3) //가장 오른쪽 차선일 때
            {
                chooseRnadomLine = 1;
            }

            if (chooseRnadomLine == 0)
            {
                MoveToRightLine();
            }
            else
            {
                MoveToLeftLine();
            }
        }

        void MoveToLeftLine() // target X값을 변경
        {
            nowLineIndex--;
            target = targetPositionX[nowLineIndex];
        }
        void MoveToRightLine() // target X값을 변경
        {
            nowLineIndex++;
            target = targetPositionX[nowLineIndex];
        }

        void InitLineIndex() // 현재 위치와 Line X값을 비교해서 어떤 라인에 있는지 확인 후 초기화
        {
            float min = Math.Abs(this.transform.position.x - targetPositionX[0]);
            int minIndex = 0;

            for(int i = 1; i < targetPositionX.Length; i++)
            {
                float temp = Math.Abs(this.transform.position.x - targetPositionX[i]);
                if (min > temp)
                {
                    min = temp;
                    minIndex = i;
                }
            }
            nowLineIndex = minIndex;
        }

        float GetInitSpeed(int min, int max)
        {
            int randomSpeed = UnityEngine.Random.Range(min, max);
            return (float)randomSpeed;
        }

        int GetInitType()
        {
            int randomType = UnityEngine.Random.Range(0, 10);
            if(randomType > 6)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }
}
